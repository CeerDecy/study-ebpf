// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpf_redirectSockKey struct {
	Sip    uint32
	Dip    uint32
	Sport  uint32
	Dport  uint32
	Family uint32
}

// loadBpf_redirect returns the embedded CollectionSpec for bpf_redirect.
func loadBpf_redirect() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Bpf_redirectBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf_redirect: %w", err)
	}

	return spec, err
}

// loadBpf_redirectObjects loads bpf_redirect and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpf_redirectObjects
//	*bpf_redirectPrograms
//	*bpf_redirectMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpf_redirectObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf_redirect()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpf_redirectSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_redirectSpecs struct {
	bpf_redirectProgramSpecs
	bpf_redirectMapSpecs
}

// bpf_redirectSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_redirectProgramSpecs struct {
	BpfRedir *ebpf.ProgramSpec `ebpf:"bpf_redir"`
}

// bpf_redirectMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_redirectMapSpecs struct {
	SockOpsMap *ebpf.MapSpec `ebpf:"sock_ops_map"`
}

// bpf_redirectObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpf_redirectObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_redirectObjects struct {
	bpf_redirectPrograms
	bpf_redirectMaps
}

func (o *bpf_redirectObjects) Close() error {
	return _Bpf_redirectClose(
		&o.bpf_redirectPrograms,
		&o.bpf_redirectMaps,
	)
}

// bpf_redirectMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpf_redirectObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_redirectMaps struct {
	SockOpsMap *ebpf.Map `ebpf:"sock_ops_map"`
}

func (m *bpf_redirectMaps) Close() error {
	return _Bpf_redirectClose(
		m.SockOpsMap,
	)
}

// bpf_redirectPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpf_redirectObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_redirectPrograms struct {
	BpfRedir *ebpf.Program `ebpf:"bpf_redir"`
}

func (p *bpf_redirectPrograms) Close() error {
	return _Bpf_redirectClose(
		p.BpfRedir,
	)
}

func _Bpf_redirectClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_redirect_bpfel.o
var _Bpf_redirectBytes []byte
